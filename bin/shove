#!/usr/bin/env ruby

$:.unshift File.dirname(__FILE__) + "/../lib"

require "optparse"
require "shove"
require "pp"

# require "net-http-spy"
# Net::HTTP.http_logger_options = {:trace => true, :verbose => true}


$ymlpath = File.expand_path("~/.shove.yml") 

def configure

  def getinput text
    print text
    STDIN.gets.strip
  end

  access = {}
  
  loop do
    
    puts "Please enter your App information."
    puts "You can find your API access information @ https://shove.io/apps"
    
    access[:app_id] = getinput "Enter App Id: "
    access[:app_key] = getinput "Enter App Key: "

    optional_url =  getinput "Enter Host (Blank for default): "

    if optional_url =~ /^http/i
      access[:api_url] = optional_url
    end

    Shove.configure access

    if Shove.valid?
      puts "Unable to validate app settings."
    else
      puts "API Settings accepted.  Moving on..."
      break
    end
    
  end

  File.open($ymlpath, "w") do |f|
    f << access.to_yaml
  end

end

# get network and key
unless FileTest.exist?($ymlpath)
  configure
end

Shove.configure YAML.load_file($ymlpath)

action  = ARGV[0]
channel = nil
client  = nil
message = nil

OptionParser.new do |o|

  o.banner = "Usage: shove "

  o.on("-h", "--help") do
    action = "help" 
  end

  o.on("-v", "--version") do
    action = "version"
  end

  o.on("-c", "--channel channel", "the channel to operate on") do |arg| 
    channel = arg 
  end

  o.on("-u", "--client client", "the client to operate on") do |arg|
    client = arg
  end

  o.on("-m", "--message message", "the message to publish") do |arg|
    message = arg
  end

  o.parse!(ARGV)
end

begin

  case action
  when "version"
    puts "shove version #{Shove::Version}"
  when "publish"

    errors = []
    errors << "channel not defined" unless channel
    errors << "message not defined" unless message

    if errors.empty?
      Shove.channel(channel).publish(message) do |r|
        if r.error? 
          puts "Error: #{r.message}"
        else
          puts "Published"
        end
      end
    else
      puts "Errors: #{errors.join(",")}"
    end
  else
    puts File.read(__FILE__).split("__END__").last
  end


rescue Exception => ex
  abort File.read(__FILE__).split("__END__").last
end

__END__
Usage: shove action [options]


Options
  -h, --help
    Show this message

Actions
  publish         publish a message to the app
                  example: shove publish -c chan -m "Hello"

  hosts           List available hosts for your app
  watch           Watch the messages on a given channel
  apps            List your known apps
  apps:use        Use a particular app
