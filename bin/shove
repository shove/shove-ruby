#!/usr/bin/env ruby

$:.unshift File.dirname(__FILE__) + "/../lib"

require "optparse"
require "shove"

action  = ARGV[0]
channel = nil
client  = nil
message = nil
app     = nil
app_dir = Shove::AppDirectory.new

OptionParser.new do |o|

  o.banner = "Usage: shove "

  o.on("-h", "--help") do
    action = "help" 
  end

  o.on("-v", "--version") do
    action = "version"
  end

  o.on("-l", "--list") do
    action = "apps"
  end

  o.on("-a", "--app app", "the app to work with") do |arg|
    app = arg
  end

  o.on("-c", "--channel channel", "the channel to operate on") do |arg| 
    channel = arg 
  end

  o.on("-u", "--client client", "the client to operate on") do |arg|
    client = arg
  end

  o.on("-m", "--message message", "the message to publish") do |arg|
    message = arg
  end

  o.parse!(ARGV)
end

begin

  case action
  when "version"
    puts "shove version #{Shove::Version}"
  when "apps"

    apps = app_dir.apps

    if apps.empty?
      puts "No apps found.  Run: shove apps:add"
    else
      puts "App Id\t\tApp Key"
      puts "-----------------------"
      apps.each_pair do |id,key|
        puts "#{id}\t\t#{key}"
      end
    end

  when "apps:add"
    app_dir.get_config app
  when "apps:default"
    app_dir.default = app
  when "hosts"
    Shove.configure(app_dir.get_config(app))

    Shove.hosts.each do |host|
      puts host
    end

  when "publish"

    Shove.configure(app_dir.get_config(app))

    errors = []
    errors << "channel not defined" unless channel
    errors << "message not defined" unless message

    if errors.empty?
      Shove.channel(channel).publish(message) do |r|
        if r.error? 
          puts "Error: #{r.message}"
        else
          puts "Published"
        end
      end
    else
      puts "Errors: #{errors.join(",")}"
    end

  when "watch"

    Shove.configure(app_dir.get_config(app))

    if channel

      EM.run do
        client = Shove.connect
        client.authorize(app_dir.key(app))

        client.on("error") do |error|
          puts "Watch Error #{error}"
          EM.stop
        end

        channel = client.channel(channel)
        channel.on("message") do |msg|
          puts "#{Time.now}: #{msg}"
        end
      end

    else
      puts "You must provide the channel with: -c channel_name"
    end
        
  else
    puts File.read(__FILE__).split("__END__").last
  end


rescue Exception => ex

  puts ex.message
  puts ex.backtrace

  abort File.read(__FILE__).split("__END__").last
end

__END__
Usage: shove action [options]


Options
  -h, --help
    Show this message

Actions
  publish         publish a message to the app
                  example: shove publish -c chan -m "Hello"

  hosts           List available hosts for your app
  watch           Watch the messages on a given channel

  apps            List known apps
  apps:default    Use a particular app
  apps:add        Add a new app
